version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    container_name: tracker-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: tracker
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - internal

  api:
    build:
      context: ./backend
    container_name: tracker-api
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/tracker?schema=public
    depends_on:
      - postgres
    networks:
      - internal
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.tracker-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.tracker-api.entrypoints=websecure
      - traefik.http.routers.tracker-api.tls=true
      - traefik.http.routers.tracker-api.tls.certresolver=${TLS_RESOLVER}
      - traefik.http.middlewares.tracker-api-strip.stripprefix.prefixes=/api
      - traefik.http.routers.tracker-api.middlewares=tracker-api-strip
      - traefik.http.services.tracker-api.loadbalancer.server.port=8080

  web:
    build:
      context: ./frontend
    container_name: tracker-web
    depends_on:
      - api
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.tracker-web.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.tracker-web.entrypoints=websecure
      - traefik.http.routers.tracker-web.tls=true
      - traefik.http.routers.tracker-web.tls.certresolver=${TLS_RESOLVER}
      - traefik.http.services.tracker-web.loadbalancer.server.port=80

networks:
  internal:
  traefik_proxy:
    external: true
    name: traefik
